// Andrea Ambrosini - Rossonet s.c.a r.l.

syntax = "proto3";

option java_multiple_files = true;
option java_package = "net.rossonet.ptalk.nlu.grpc";
option java_outer_classname = "PtalkNluApi";

import "ptalk-base-api.proto";

package nlu;

// any nlu agent can have many models, to better identify this models
message NluModel {
  string requiredCapability = 1;    // optional
  string model = 2;            // unique name of the model
  string modelVersion = 3;    // version of the model, this field can be used to call different version on the same agent
  string jsonModelSignature = 4; // description of a modelâ€™s inputs and outputs
  string inputExample = 5; // example of a valid model input
  string outputExample = 6; // example of a valid model output
}

message TrainingLineLog {
  base.Timestamp timestamp = 1;
  string logLevel = 2;
  string message = 3;
}

message NluMessageRequest {
  string flowReference = 1;      // the flow related to this message
  string messageReference = 2;       // in case this request is related to a channel message, here we have the channelUniqueMessageId
  string originContext = 3;         // context in original format
  NluModel model = 4;              // the target model
  string replyTask = 5;             // the core engine task to reply to
  base.Data message = 6;			// the base text message
  string contextJson = 7;         // context in json format
  repeated base.Data additionalDatas = 8;   // array of additional datas
  repeated base.Tag tags = 9;
  base.Timestamp timestamp = 10;
  bool traceLog = 11;    // enable or disable trace log function
}

message NluMessageReply {
  string flowReference = 1;      // the flow related to this message
  string messageReference = 2;      // in case this request is related to a channel message, here we have the channelUniqueMessageId
  string originContext = 3;       // context in original format
  NluModel model = 4;             // the model that generated this reply
  string task = 5;                 // the core engine task that will process this reply
  base.Data reply = 6;       // the base reply
  string contextJson = 7;        // context in json format
  base.StatusValue status = 8;
  repeated base.Data additionalDatas = 9;   // array of additional datas
  repeated base.Tag tags = 10;
  base.Timestamp timestamp = 11;
  bool traceLog = 12;    // enable or disable trace log function
}

message NluTrainingModelRequest {
  string flowReference = 1;
  NluModel model = 2;
  string trainingJob = 3;
  string testJob = 4;
  repeated base.Data trainingData = 5;
  repeated base.Data testData = 6;
  repeated base.Data trainingSecret = 7;
  repeated base.Data testSecret = 8;
  int32 timeoutMinutes = 9;
  base.Timestamp timestamp = 10;
  string trainingEngine = 11;
}

message NluTrainingModelReply {
  string flowReference = 1;
  NluModel model = 2;
  base.StatusValue status = 3;
  int64 trainingTime = 4;
  int64 testTime = 5;
  repeated TrainingLineLog trainingLog = 6;
  repeated TrainingLineLog testLog = 7;
  base.Timestamp timestamp = 8;
}

message NluListModelsRequest {
  string flowReference = 1;
  base.Timestamp timestamp = 2;
}

message NluListModelsReply {
  string flowReference = 1;
  repeated NluModel model = 2;
  base.StatusValue status = 3;
  base.Timestamp timestamp = 4;
}

message NluDeleteModelRequest {
  string flowReference = 1;
  NluModel model = 2;
  base.Timestamp timestamp = 3;
}

message NluDeleteModelReply {
  string flowReference = 1;
  base.StatusValue status = 2;
  base.Timestamp timestamp = 3;
}

message NluSnapshotModelRequest {
  string flowReference = 1;
  NluModel model = 2;
  base.Timestamp timestamp = 3;
}

message NluSnapshotModelReply {
  string flowReference = 1;
  base.StatusValue status = 2;
  base.Timestamp timestamp = 3;
  repeated base.Data modelSnapshotData = 4; // model dump
}

message NluRestoreModelRequest {
  string flowReference = 1;
  NluModel model = 2;
  base.Timestamp timestamp = 3;
  repeated base.Data modelSnapshotData = 4; // model dump
}

message NluRestoreModelReply {
  string flowReference = 1;
  base.StatusValue status = 2;
  base.Timestamp timestamp = 3;
}

service RpcNluCoreV1 {
  rpc ReplyTrainingModelAsync (NluTrainingModelReply) returns (base.Status) {}
}

service RpcNluUnitV1 {
  // elaborate a request in sync way
  rpc CallSync (NluMessageRequest) returns (NluMessageReply) {}
  // train request async, the reply will be send later
  rpc TrainModelAsync (NluTrainingModelRequest) returns (base.Status) {}
  // list all models in this unit
  rpc ListModels (NluListModelsRequest) returns (NluListModelsReply) {}
  // delete a model from this unit
  rpc DeleteModel (NluDeleteModelRequest) returns (NluDeleteModelReply) {}
  // freeze a state of a model end generate a snapshot (OPTIONAL)
  rpc SnapshotModel (NluSnapshotModelRequest) returns (NluSnapshotModelReply) {}
  // restore  a model from a snapshot (OPTIONAL)
  rpc RestoreModel (NluRestoreModelRequest) returns (NluRestoreModelReply) {}
}

