// Andrea Ambrosini - Rossonet s.c.a r.l.
// the original copy of this file is in ptalk-base-api directory at the root of the main project.
// Doesn't edit the file in other location, it'll be overwritten.

syntax = "proto3";

option java_multiple_files = true;
option java_package = "net.rossonet.ptalk.base.grpc";
option java_outer_classname = "PtalkBaseObject";

package base;

message Empty {
}

message Timestamp {
  int64 milliSeconds = 1;
  int32 nanos = 2;
}

enum StatusValue {
  STATUS_GOOD = 0;
  STATUS_BAD = 1;
  STATUS_FAULT = 2;
  STATUS_WAIT_HUMAN = 3;
  STATUS_NOT_APPROVED = 4;
}

message Status {
  StatusValue status = 1;
}

enum LifecycleStatus {
    INIT = 0;
    CONFIGURED = 2;
    RUNNING = 3;
    KILLED = 4;
    FAULTED = 5;
    STOPPED = 6;
 }

enum LogSeverity {
  DEFAULT = 0;
  DEBUG = 100;
  INFO = 200;
  NOTICE = 300;
  WARNING = 400;
  ERROR = 500;
  CRITICAL = 600;
  ALERT = 700;
  EMERGENCY = 800;
}

enum DataType {
  STRING = 0;
  CHAR = 1;
  INT32 = 2;
  INT64 = 3;
  FLOAT = 4;
  DOUBLE = 5;
  BOOLEAN = 6;
  TIMESTAMP = 7;
  UNKNOWN = 8;
  JSONDATA = 9;
  BASE64DATA = 10;
  LOCAL_PATH = 11;
  REMOTE_URL = 12;
}

enum Quality {
  QUALITY_UNKNOWN = 0;
  GOOD = 200;
  BAD = 400;
  CACHED = 1000;
}

enum UnitType {
  ABILITY = 0;
  CHANNEL = 20;
  NLU = 40;
  SELF = 80; // ability with all permissions
}

// generic data used in other messages.
message Data {
  string key = 1;     // the variable name
  string value = 2;
  DataType typeData = 3;     // data type are the basic type plus json for structured data and base64 for binary
  Timestamp timestamp = 4;
  string displayName = 5;    // for human interface [OPTIONAL]
  string shortDescription = 6;    // for human interface [OPTIONAL]
  string description = 7;    // for human interface [OPTIONAL]
  Quality quality = 8;    // for IIoT context [OPTIONAL]
  int32 priority = 9;    // for QoS context [OPTIONAL]
  int64 weight = 10;    // for AI context [OPTIONAL]
}

// a tree of tags
message Tag {
  string tag = 1;
  string displayName = 2;    // for human interface [OPTIONAL]
  string shortDescription = 3;    // for human interface [OPTIONAL]
  string description = 4;    // for human interface [OPTIONAL]
  string tagFather = 5;
}

message GenericMessageRequest {
  string flowReference = 1;   // the flow related to this message
  string messageReference = 2;  // the unique reference for this message
  repeated Data additionalDatas = 3;    // array of data
  repeated Tag tags = 4;      // array of tags
  Timestamp timestamp = 5;
}

message GenericMessageReply {
  string flowReference = 1;   // the flow related to this message
  string messageReference = 2;  // the unique reference for this message, should be equals to the request code
  StatusValue generalStatus = 3;   // the status of the elaboration process that generates this reply
  repeated Data additionalDatas = 4;    // array of data
  repeated Tag tags = 5;      // array of tags
  Timestamp timestamp = 6;
}

// register unit (ability, channel or nlu) to ptalk engine
message RegisterRequest {
  string unitUniqueName = 1;
  UnitType unitType = 2;
  string displayName = 3;    // for human interface [OPTIONAL]
  string host = 4;
  int32 port = 5;
  string shortDescription = 6;    // for human interface [OPTIONAL]
  string description = 7;    // for human interface [OPTIONAL]
  string jsonHealth = 8;
  string certificateCrt = 9;    // for cryptographic communication
  repeated string capabilities = 10;
  repeated Data additionalDatas = 11;
  repeated Tag tags = 12;
  string selfSuperAbilityCode = 13;  // OTP code if the unit is Homunculus ( super Ability ) and the context is enforced
  Timestamp timestamp = 14;
}

message RegisterReply {
  string unitUniqueName = 1;
  int32 monitoringFrequency = 2;
  string globalJsonConfig = 3;
  string certificate = 4;    // for cryptographic communication
  string certificateFullChain = 5;    // for cryptographic communication
  StatusValue statusRegistration = 6;
  int64 timestampRegistration = 7;
  string otpSeed = 8;   // for enforced context
  repeated Data additionalDatas = 9;
  repeated Tag tags = 10;
  Timestamp timestamp = 11;
}

message HealthRequest {
  string flowReference = 1;
  string unitUniqueName = 2;
  string jsonHardwareInfo = 3;
  StatusValue status = 4;
  LifecycleStatus lifecycleStatus = 5;
  Timestamp timestamp = 6;
}

message StackTraceLine {
  string message = 1;
  string exceptionClass = 2;
  string class = 3;
  string file = 4;
  int32 line = 5;
}

message LogRequest {
  string flowReference = 1;
  string unitUniqueName = 2;
  LogSeverity severity = 3;
  string logLine = 4;
  string messageReference = 6;
  repeated StackTraceLine stacktrace = 7;
  StatusValue status = 8;
  LifecycleStatus lifecycleStatus = 9;
  Timestamp timestamp = 10;
}

service RpcCoreV1 {
  // register unit (ability, channel or nlu) to ptalk engine
  rpc Register (RegisterRequest) returns (RegisterReply) {}
  // log from unit
  rpc Log (LogRequest) returns (Status) {}
  // health from unit
  rpc Health (HealthRequest) returns (Status) {}
  // generic message, not covered by the other RPCs
  rpc Message (GenericMessageRequest) returns (GenericMessageReply) {}
}

service RpcSlaveUnitV1 {
  // generic message, not covered by the other RPCs
  rpc Message (GenericMessageRequest) returns (GenericMessageReply) {}
}
